import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest

from config.config import BOT_TOKEN, HELP_TEXT, ABOUT_TEXT
from src.keyboards.keyboards import get_main_keyboard, get_models_keyboard, get_cancel_keyboard, get_generation_type_keyboard
from src.utils.pollinations import fetch_all_models, generate_text, generate_image
from src.states.user import UserState

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def get_user_stats(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in user_data:
        user_data[user_id] = {
            "images_generated": 0,
            "texts_generated": 0,
            "last_used": None,
            "current_model": None,
            "model_type": None,
            "text_models": None,
            "image_models": None
        }
    return user_data[user_id]

def get_menu_text(user_id: int) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏."""
    stats = get_user_stats(user_id)
    current_model = stats.get("current_model", "–ù–µ –≤—ã–±—Ä–∞–Ω–∞")
    model_type = stats.get("model_type", "")
    images_count = stats.get("images_generated", 0)
    texts_count = stats.get("texts_generated", 0)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    display_type = {
        "text": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞",
        "image": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
    }.get(model_type, "–ù–µ –≤—ã–±—Ä–∞–Ω")

    return (
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_count}\n"
        f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤: {texts_count}\n\n"
        f"üîÑ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model}\n"
        f"üìå –¢–∏–ø: {display_type}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

async def safe_edit_message(message: types.Message, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç —Ç–µ–∫—É—â–∏—Ö
        current_text = message.text or message.caption
        if current_text == text:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            try:
                await message.edit_reply_markup(reply_markup=reply_markup)
            except TelegramBadRequest:
                pass
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(text, reply_markup=reply_markup)
    except Exception as e:
        logging.error(f"Error editing message: {e}")
        await message.answer(text, reply_markup=reply_markup)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    get_user_stats(message.from_user.id)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pollinations.ai API.\n" + 
        get_menu_text(message.from_user.id),
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(HELP_TEXT, reply_markup=get_main_keyboard())

@dp.message(Command("about"))
async def cmd_about(message: types.Message):
    await message.answer(ABOUT_TEXT, reply_markup=get_main_keyboard())

@dp.message(Command("models"))
async def cmd_models(message: types.Message):
    await update_models(message)

@dp.callback_query(F.data == "help")
async def help_button(callback: types.CallbackQuery):
    await safe_edit_message(callback.message, HELP_TEXT, reply_markup=get_main_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "about")
async def about_button(callback: types.CallbackQuery):
    await safe_edit_message(callback.message, ABOUT_TEXT, reply_markup=get_main_keyboard())
    await callback.answer()

async def update_models(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É."""
    status_message = await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    text_models, image_models = await fetch_all_models()
    
    if text_models and image_models:
        user_data[message.from_user.id] = {
            "text_models": text_models,
            "image_models": image_models
        }
        await status_message.edit_text(
            "‚úÖ –°–ø–∏—Å–∫–∏ –º–æ–¥–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=get_main_keyboard()
        )
    else:
        await status_message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏ –º–æ–¥–µ–ª–µ–π",
            reply_markup=get_main_keyboard()
        )

@dp.callback_query(F.data == "update_models")
async def update_models_callback(callback: types.CallbackQuery):
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    text_models, image_models = await fetch_all_models()
    
    if text_models and image_models:
        user_data[callback.from_user.id] = {
            "text_models": text_models,
            "image_models": image_models
        }
        await safe_edit_message(
            callback.message,
            "‚úÖ –°–ø–∏—Å–∫–∏ –º–æ–¥–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=get_main_keyboard()
        )
    else:
        await safe_edit_message(
            callback.message,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏ –º–æ–¥–µ–ª–µ–π",
            reply_markup=get_main_keyboard()
        )
    await callback.answer()

@dp.callback_query(F.data == "choose_model")
async def choose_model_type(callback: types.CallbackQuery):
    await safe_edit_message(
        callback.message,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–µ–π:",
        reply_markup=get_generation_type_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    await safe_edit_message(
        callback.message,
        get_menu_text(callback.from_user.id),
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "select_image_models")
async def show_image_models(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    stats = get_user_stats(user_id)
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª–µ–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
    if not stats.get("image_models"):
        await safe_edit_message(
            callback.message,
            "üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π...",
            reply_markup=None
        )
        text_models, image_models = await fetch_all_models()
        if not image_models:
            await safe_edit_message(
                callback.message,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
            await callback.answer()
            return
        
        stats["text_models"] = text_models
        stats["image_models"] = image_models
    
    await safe_edit_message(
        callback.message,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:",
        reply_markup=get_models_keyboard(stats["image_models"], "image")
    )
    await callback.answer()

@dp.callback_query(F.data == "select_text_models")
async def show_text_models(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    stats = get_user_stats(user_id)
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª–µ–π –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
    if not stats.get("text_models"):
        await safe_edit_message(
            callback.message,
            "üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π...",
            reply_markup=None
        )
        text_models, image_models = await fetch_all_models()
        if not text_models:
            await safe_edit_message(
                callback.message,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
            await callback.answer()
            return
        
        stats["text_models"] = text_models
        stats["image_models"] = image_models
    
    await safe_edit_message(
        callback.message,
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=get_models_keyboard(stats["text_models"], "text")
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("image_model_"))
async def image_model_selected(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    model_name = callback.data.replace("image_model_", "")
    stats = get_user_stats(user_id)
    stats["current_model"] = model_name
    stats["model_type"] = "image"
    
    await safe_edit_message(
        callback.message,
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {model_name}\n\n" + 
        get_menu_text(user_id),
        reply_markup=get_main_keyboard()
    )
    await callback.answer("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞!")

@dp.callback_query(F.data.startswith("text_model_"))
async def text_model_selected(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    model_name = callback.data.replace("text_model_", "")
    stats = get_user_stats(user_id)
    stats["current_model"] = model_name
    stats["model_type"] = "text"
    
    await safe_edit_message(
        callback.message,
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {model_name}\n\n" + 
        get_menu_text(user_id),
        reply_markup=get_main_keyboard()
    )
    await callback.answer("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞!")

@dp.callback_query(F.data == "generate_image")
async def start_image_generation(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in user_data or "current_model" not in user_data[user_id]:
        await safe_edit_message(
            callback.message,
            "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏'",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()
        return
    
    if user_data[user_id].get("model_type") != "image":
        await safe_edit_message(
            callback.message,
            "‚ùó –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()
        return
    
    await safe_edit_message(
        callback.message,
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(UserState.waiting_for_image_prompt)
    await callback.answer()

@dp.callback_query(F.data == "generate_text")
async def start_text_generation(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in user_data or "current_model" not in user_data[user_id]:
        await safe_edit_message(
            callback.message,
            "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏'",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()
        return
    
    if user_data[user_id].get("model_type") != "text":
        await safe_edit_message(
            callback.message,
            "‚ùó –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()
        return
    
    await safe_edit_message(
        callback.message,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(UserState.waiting_for_text_prompt)
    await callback.answer()

@dp.message(UserState.waiting_for_image_prompt)
async def process_image_prompt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    stats = get_user_stats(user_id)
    model = stats["current_model"]
    
    status_message = await message.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    image_url = await generate_image(model, message.text)
    if image_url:
        stats["images_generated"] += 1
        stats["last_used"] = datetime.now()
        await message.answer_photo(
            photo=image_url,
            caption=f"‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n–ü—Ä–æ–º–ø—Ç: {message.text}"
        )
        await message.answer(get_menu_text(user_id), reply_markup=get_main_keyboard())
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            reply_markup=get_main_keyboard()
        )
    
    await status_message.delete()
    await state.clear()

@dp.message(UserState.waiting_for_text_prompt)
async def process_text_prompt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    stats = get_user_stats(user_id)
    model = stats["current_model"]
    
    image_data = None
    if message.photo:
        photo = message.photo[-1]
        image_data = await bot.download(photo.file_id)
    
    status_message = await message.answer("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    response = await generate_text(model, message.text, image_data)
    if response:
        stats["texts_generated"] += 1
        stats["last_used"] = datetime.now()
        await message.answer(response)
        await message.answer(get_menu_text(user_id), reply_markup=get_main_keyboard())
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )
    
    await status_message.delete()
    await state.clear()

@dp.callback_query(F.data == "cancel")
async def cancel_action(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_edit_message(
        callback.message,
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 